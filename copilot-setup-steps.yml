# GitHub Copilot Agent Environment Setup Configuration
# This file defines the setup steps for coding agents working on the tagkit project
#
# Based on project requirements from AGENTS.md:
# - Python 3.9+ environment
# - uv package manager for dependency management
# - Development tools: Ruff, mypy, pytest, nox
# - Pre-commit hooks and CI/CD tools

name: "tagkit Development Environment"
description: "Environment setup for tagkit - Python CLI & API for editing EXIF data"

# Python version requirements
python:
  version: ">=3.9"
  preferred: "3.13"

# Package manager and environment setup
package_manager: "uv"

# Environment setup steps
setup_steps:
  - name: "Install uv package manager"
    description: "Install uv for fast Python package management"
    command: "pip install uv"
    
  - name: "Sync project dependencies"
    description: "Create virtual environment and install all dependencies"
    command: "uv sync"
    working_directory: "."
    
  - name: "Verify installation"
    description: "Test that tagkit CLI is properly installed"
    command: "uv run tagkit --version"
    
# Development tools configuration
dev_tools:
  linting:
    tool: "ruff"
    command: "uv run nox -s lint"
    description: "Run code linting with Ruff"
    
  formatting:
    tool: "ruff"
    command: "uv run nox -s format"
    description: "Format code with Ruff"
    
  type_checking:
    tool: "mypy"
    command: "uv run nox -s types"
    description: "Run static type checking with mypy"
    
  testing:
    tool: "pytest"
    command: "uv run nox -s test"
    description: "Run test suite with pytest across Python 3.9-3.13"
    
  docs:
    tool: "sphinx"
    command: "uv run nox -s docs"
    description: "Build documentation with Sphinx"
    
  coverage:
    tool: "pytest-cov"
    command: "uv run nox -s coverage"
    description: "Run tests with coverage reporting"

# Quality checks
quality_checks:
  - name: "all_checks"
    description: "Run all quality checks (lint, format, types)"
    command: "uv run nox -s check"
    
# Pre-commit hooks setup (optional but recommended)
pre_commit:
  enabled: true
  setup_command: "uv run pre-commit install"
  hooks:
    - "ruff-linter"
    - "ruff-formatter" 
    - "mypy"
    - "yaml-validation"
    - "spell-check"
    - "detect-secrets"

# Project structure awareness
project_structure:
  source_directory: "src/tagkit"
  test_directory: "tests"
  docs_directory: "docs"
  config_files:
    - "pyproject.toml"
    - "noxfile.py"
    - ".pre-commit-config.yaml"
    - "cspell.json"

# Common development commands
common_commands:
  setup: "uv sync"
  test: "uv run nox -s test"
  lint: "uv run nox -s lint"
  format: "uv run nox -s format"
  check: "uv run nox -s check"
  docs: "uv run nox -s docs"
  clean: "uv run nox -s clean"

# Dependencies information
dependencies:
  runtime:
    - "piexif>=1.1.3"
    - "pyyaml>=6.0.2"
    - "rich>=14.0.0"
    - "typer>=0.15.2"
  development:
    - "mypy>=1.15.0"
    - "nox>=2025.2.9"
    - "pillow>=11.2.1"
    - "pre-commit>=4.2.0"
    - "pytest>=8.3.5"
    - "pytest-cov>=6.1.1"
    - "ruff>=0.11.6"
  docs:
    - "furo>=2024.8.6"
    - "myst-parser>=3.0.1"
    - "sphinx>=7.4.7"
    - "sphinx-autobuild>=2024.10.3"
    - "sphinx-autodoc2>=0.5.0"

# Environment variables that may be needed
environment_variables:
  UV_PROJECT_ENVIRONMENT: "auto"

# Validation steps to ensure environment is ready
validation_steps:
  - name: "Check Python version"
    command: "python --version"
    expected_pattern: "Python 3\\.(9|1[0-3])\\."
    
  - name: "Check uv installation"
    command: "uv --version"
    
  - name: "Check tagkit installation"
    command: "uv run tagkit --version"
    
  - name: "Run basic test"
    command: "uv run pytest tests/ -x -q"
    description: "Quick test run to validate setup"

# Notes for agents
notes: |
  This project uses uv for fast dependency management and nox for task automation.
  All development tasks should be run through nox sessions for consistency.
  
  Key commands:
  - Setup: uv sync
  - Test: uv run nox -s test  
  - Lint: uv run nox -s lint
  - Format: uv run nox -s format
  - Check all: uv run nox -s check
  
  The project supports Python 3.9-3.13 and uses Ruff for linting/formatting,
  mypy for type checking, and pytest for testing.